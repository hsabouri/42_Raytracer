!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AMBIENT	defines.h	/^# define AMBIENT /;"	d
BACK	defines.h	/^	BACK,$/;"	e	enum:e_dir
BACKSLASH	defines.h	/^	BACKSLASH$/;"	e	enum:e_type
CONE	defines.h	/^	CONE,$/;"	e	enum:e_type
CYLINDER	defines.h	/^	CYLINDER,$/;"	e	enum:e_type
DEFINES_H	defines.h	/^# define DEFINES_H$/;"	d
DEPTH_MAX	defines.h	/^# define DEPTH_MAX /;"	d
DOWN	defines.h	/^	DOWN,$/;"	e	enum:e_dir
EPSILON	defines.h	/^# define EPSILON /;"	d
FRONT	defines.h	/^	FRONT,$/;"	e	enum:e_dir
FUNCTIONS_H	functions.h	/^# define FUNCTIONS_H$/;"	d
HEIGHT	defines.h	/^# define HEIGHT /;"	d
KEY_ADN	defines.h	/^# define KEY_ADN /;"	d
KEY_ALF	defines.h	/^# define KEY_ALF /;"	d
KEY_ART	defines.h	/^# define KEY_ART /;"	d
KEY_AUP	defines.h	/^# define KEY_AUP /;"	d
KEY_ES	defines.h	/^# define KEY_ES /;"	d
KEY_MN	defines.h	/^# define KEY_MN	/;"	d
KEY_PL	defines.h	/^# define KEY_PL /;"	d
KEY_R	defines.h	/^# define KEY_R	/;"	d
KEY_S	defines.h	/^# define KEY_S	/;"	d
LEFT	defines.h	/^	LEFT,$/;"	e	enum:e_dir
LENGTH	defines.h	/^# define LENGTH /;"	d
MALLOC_FAILED	defines.h	/^# define MALLOC_FAILED /;"	d
MAX_SOURCE_SIZE	defines.h	/^# define MAX_SOURCE_SIZE /;"	d
MEM_SIZE	defines.h	/^# define MEM_SIZE /;"	d
MESH	defines.h	/^	MESH,$/;"	e	enum:e_type
MOVEMENT	defines.h	/^	MOVEMENT,$/;"	e	enum:e_mode
NOLIGHT	defines.h	/^	NOLIGHT$/;"	e	enum:e_ltype
OMNI	defines.h	/^	OMNI,$/;"	e	enum:e_ltype
PARSING_ERROR	defines.h	/^# define PARSING_ERROR /;"	d
PI	defines.h	/^# define PI /;"	d
PLANE	defines.h	/^	PLANE,$/;"	e	enum:e_type
POLYGON	defines.h	/^	POLYGON,$/;"	e	enum:e_type
RIGHT	defines.h	/^	RIGHT,$/;"	e	enum:e_dir
ROTATION	defines.h	/^	ROTATION$/;"	e	enum:e_mode
RT_H	rt.h	/^# define RT_H$/;"	d
SPHERE	defines.h	/^	SPHERE,$/;"	e	enum:e_type
SPOT	defines.h	/^	SPOT,$/;"	e	enum:e_ltype
STRUCT_H	struct.h	/^# define STRUCT_H$/;"	d
UP	defines.h	/^	UP$/;"	e	enum:e_dir
a	struct.h	/^	unsigned char	a;$/;"	m	struct:s_color
addr	struct.h	/^	char			*addr;$/;"	m	struct:s_env
b	struct.h	/^	unsigned char	b;$/;"	m	struct:s_color
bpp	struct.h	/^	int				bpp;$/;"	m	struct:s_env
cam	struct.h	/^	t_cam			cam;$/;"	m	struct:s_env
chld	struct.h	/^	struct s_obj	*chld;$/;"	m	struct:s_obj	typeref:struct:s_obj::s_obj
cl	struct.h	/^	t_cl			cl;$/;"	m	struct:s_env
coef	struct.h	/^	t_vec4			coef;$/;"	m	struct:s_mat
command_queue	struct.h	/^	cl_command_queue	command_queue;$/;"	m	struct:s_cl
context	struct.h	/^	cl_context			context;$/;"	m	struct:s_cl
control	struct.h	/^	t_mode			control;$/;"	m	struct:s_cam
device_id	struct.h	/^	cl_device_id		device_id;$/;"	m	struct:s_cl
dir	struct.h	/^	t_vec4			dir;$/;"	m	struct:s_lgt
dir	struct.h	/^	t_vec4			dir;$/;"	m	struct:s_obj
dir	struct.h	/^	t_vec4			dir;$/;"	m	struct:s_ray
e_dir	defines.h	/^typedef enum	e_dir$/;"	g
e_ltype	defines.h	/^typedef enum	e_ltype$/;"	g
e_mode	defines.h	/^typedef enum	e_mode$/;"	g
e_type	defines.h	/^typedef enum	e_type$/;"	g
endian	struct.h	/^	int				endian;$/;"	m	struct:s_env
fov	struct.h	/^	double			fov;$/;"	m	struct:s_cam
g	struct.h	/^	unsigned char	g;$/;"	m	struct:s_color
hitpnt	struct.h	/^	t_vec4			hitpnt;$/;"	m	struct:s_lgt
img	struct.h	/^	void			*img;$/;"	m	struct:s_env
inv	struct.h	/^	t_quat			*inv;$/;"	m	struct:s_obj
kernel	struct.h	/^	cl_kernel			kernel;$/;"	m	struct:s_cl
last_id	struct.h	/^	int				last_id;$/;"	m	struct:s_env
lgt	struct.h	/^	t_lgt			*lgt;$/;"	m	struct:s_env
lst	struct.h	/^	int				lst;$/;"	m	struct:s_obj
mat	struct.h	/^	t_mat			mat;$/;"	m	struct:s_obj
memobj	struct.h	/^	cl_mem				memobj;$/;"	m	struct:s_cl
mlx	struct.h	/^	void			*mlx;$/;"	m	struct:s_env
n_lgt	struct.h	/^	unsigned int	n_lgt;$/;"	m	struct:s_env
n_obj	struct.h	/^	unsigned int	n_obj;$/;"	m	struct:s_env
n_vrt	struct.h	/^	unsigned int	n_vrt;$/;"	m	struct:s_env
name	struct.h	/^	char			*name;$/;"	m	struct:s_lgt
name	struct.h	/^	char			*name;$/;"	m	struct:s_obj
normal	struct.h	/^	t_vec4			normal;$/;"	m	struct:s_lgt
objs	struct.h	/^	t_obj			*objs;$/;"	m	struct:s_env
org	struct.h	/^	t_vec4			org;$/;"	m	struct:s_ray
platform_id	struct.h	/^	cl_platform_id		platform_id;$/;"	m	struct:s_cl
pos	struct.h	/^	t_vec4			pos;$/;"	m	struct:s_cam
pos	struct.h	/^	t_vec4			pos;$/;"	m	struct:s_lgt
pos	struct.h	/^	t_vec4			pos;$/;"	m	struct:s_obj
program	struct.h	/^	cl_program			program;$/;"	m	struct:s_cl
r	struct.h	/^	unsigned char	r;$/;"	m	struct:s_color
radius	struct.h	/^	double			radius;$/;"	m	struct:s_obj
redraw	struct.h	/^	int				redraw;$/;"	m	struct:s_env
reflect	struct.h	/^	int				reflect;$/;"	m	struct:s_mat
refract	struct.h	/^	double			refract;$/;"	m	struct:s_mat
ret	struct.h	/^	cl_int				ret;$/;"	m	struct:s_cl
ret_num_devices	struct.h	/^	cl_uint				ret_num_devices;$/;"	m	struct:s_cl
ret_num_platforms	struct.h	/^	cl_uint				ret_num_platforms;$/;"	m	struct:s_cl
rgb	struct.h	/^	t_color			rgb;$/;"	m	struct:s_lgt
rgb	struct.h	/^	t_color			rgb;$/;"	m	struct:s_mat
rot	struct.h	/^	t_quat			*rot;$/;"	m	struct:s_cam
rot	struct.h	/^	t_quat			*rot;$/;"	m	struct:s_obj
s_cam	struct.h	/^typedef struct		s_cam$/;"	s
s_cl	struct.h	/^typedef struct		s_cl$/;"	s
s_color	struct.h	/^typedef struct		s_color$/;"	s
s_env	struct.h	/^typedef struct		s_env$/;"	s
s_lgt	struct.h	/^typedef struct		s_lgt$/;"	s
s_mat	struct.h	/^typedef struct		s_mat$/;"	s
s_obj	struct.h	/^typedef struct		s_obj$/;"	s
s_ray	struct.h	/^typedef struct		s_ray$/;"	s
shadow	struct.h	/^	int				shadow;$/;"	m	struct:s_env
size	struct.h	/^	int				size;$/;"	m	struct:s_env
source_size	struct.h	/^	size_t				source_size;$/;"	m	struct:s_cl
source_str	struct.h	/^	char				*source_str;$/;"	m	struct:s_cl
str	struct.h	/^	char				str[MEM_SIZE];$/;"	m	struct:s_cl
t	struct.h	/^	double			t;$/;"	m	struct:s_ray
t_cam	struct.h	/^}					t_cam;$/;"	t	typeref:struct:s_cam
t_cl	struct.h	/^}					t_cl;$/;"	t	typeref:struct:s_cl
t_color	struct.h	/^}					t_color;$/;"	t	typeref:struct:s_color
t_dir	defines.h	/^}				t_dir;$/;"	t	typeref:enum:e_dir
t_env	struct.h	/^}					t_env;$/;"	t	typeref:struct:s_env
t_lgt	struct.h	/^}					t_lgt;$/;"	t	typeref:struct:s_lgt
t_ltype	defines.h	/^}				t_ltype;$/;"	t	typeref:enum:e_ltype
t_mat	struct.h	/^}					t_mat;$/;"	t	typeref:struct:s_mat
t_mode	defines.h	/^}				t_mode;$/;"	t	typeref:enum:e_mode
t_obj	struct.h	/^}					t_obj;$/;"	t	typeref:struct:s_obj
t_ray	struct.h	/^}					t_ray;$/;"	t	typeref:struct:s_ray
t_type	defines.h	/^}				t_type;$/;"	t	typeref:enum:e_type
type	struct.h	/^	t_ltype			type;$/;"	m	struct:s_lgt
type	struct.h	/^	t_type			type;$/;"	m	struct:s_obj
vert	struct.h	/^	t_vec4			vert[3];$/;"	m	struct:s_obj
vrts	struct.h	/^	t_vec4			*vrts;$/;"	m	struct:s_env
win	struct.h	/^	void			*win;$/;"	m	struct:s_env
